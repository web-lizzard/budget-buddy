---
description:
globs:
alwaysApply: false
---
## Handler Decoration

- Always add the `@inject` decorator to route handlers (endpoints)
- Place the `@inject` decorator after FastAPI route decorators but before the function definition


## Dependency Injection

- Use the `Annotated` type with `Depends` to inject dependencies into route handlers
- Inject dependencies from the container using `Provide[Container.service]` pattern
- Examples:

```python
# Modifiying state operation
from typing import Annotated
from fastapi import Depends, FastAPI
from dependency_injector.wiring import Provide
from your_app.containers import Container

@router.post("/", status_code=http_status.HTTP_201_CREATED)
@inject
async def create_budget(
    payload: CreateBudgetRequestPayload,
    budget_repository: Annotated[
        BudgetRepository,
        Depends(
            Provide[
                AppContainer.persistence_container.provided.get_repository.call(
                    BudgetRepository
                )
            ]
        ),
    ],
    budget_factory: Annotated[
        BudgetFactory,
        Depends(Provide[AppContainer.domain_container.budget_factory]),
    ],
    unit_of_work: Annotated[
        UnitOfWork, Depends(Provide[AppContainer.persistence_container.uow])
    ],
):
    """
    Create a new budget.

    Args:
        payload: Budget creation data.
        budget_repository: Repository for budget persistence.
        budget_factory: Factory for creating budget entities.
        unit_of_work: Unit of work for transaction management.
    """
    # TODO: Replace with actual authenticated user ID
    user_id = uuid4()

    command = CreateBudgetCommand(
        user_id=user_id,
        total_limit=payload.total_limit.amount,
        currency=payload.total_limit.currency,
        strategy_input=_map_strategy_to_input(payload.strategy),
        start_date=datetime.combine(payload.start_date, datetime.min.time()),
        categories=[_map_category_create_to_data(cat) for cat in payload.categories],
        name=payload.name,
    )
    command_handler = CreateBudgetCommandHandler(
        budget_repository=budget_repository,
        budget_factory=budget_factory,
        unit_of_work=unit_of_work,
    )
    await command_handler.handle(command)
```


```python
### Query handler
### ...imports
@router.get("/")
@inject
async def get_budgets(
    query_handler: Annotated[
        QueryHandler[GetBudgetsQuery, PaginatedItemDTO[BudgetDTO]],
        Depends(
            Provide[
                AppContainer.persistence_container.provided.get_query_handler.call(
                    GetBudgetsQuery
                )
            ]
        ),
    ],
    status: str | None = Query(None, description="Filter by 'active' or 'expired'"),
    page: int = Query(1, ge=1, description="Page number"),
    limit: int = Query(10, ge=1, le=100, description="Items per page"),
    sort: str | None = Query(None, description="Field to sort by"),
) -> PaginatedItemDTO[BudgetDTO]:
    """
    Retrieve a list of budgets with pagination and filtering options.

    Args:
        status: Optional filter for budget status ('active' or 'expired')
        page: Page number for pagination
        limit: Number of items per page
        sort: Field to sort results by
        query_handler: Injected query handler for retrieving budgets
    """
    query = GetBudgetsQuery(
        status=status,
        page=page,
        limit=limit,
        sort=sort,
    )
    return await query_handler.handle(query)
```

- Combine dependency-injection framework with FastAPI's built-in `Depends` for cleaner code
- Create reusable dependencies as functions that can be shared across multiple endpoints


## Asynchronous Programming

- Use `async def` for route handlers and `await` for asynchronous operations
- Follow these rules for async/await:
    - Use `async def` for I/O-bound operations (database queries, HTTP requests)
    - Use regular `def` for CPU-bound operations (calculations, processing)
    - Never use blocking code inside async functions as it will block the entire event loop
    - For synchronous operations within async functions, use `run_in_threadpool`


## Payload Structure

- Store all endpoint request and response models in the `api/payloads` module
- Use Pydantic models to define payload structures
- Example:

```python
# api/payloads/items.py
from pydantic import BaseModel

class ItemCreate(BaseModel):
    name: str
    description: str
    price: float
    tax: float = None
```


## Naming Conventions

- Follow Python naming conventions while respecting FastAPI specifics:
    - Use snake_case for function names, variables, and parameters
    - Use PascalCase for class names (including Pydantic models)
    - Use plural form for resource names in API paths
    - Internally use snake_case for FastAPI parameters


## General FastAPI Practices

- Structure your application in layers (controllers, services, repositories)
- Use dependency injection to create a chain of dependencies between layers
- Consider using event dispatching for handling side effects
- Validate request payloads using Pydantic models
- Use type hints consistently throughout the codebase
- Keep route handlers thin, delegating business logic to service layer
