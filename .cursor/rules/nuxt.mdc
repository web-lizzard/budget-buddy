---
description:
globs: *.vue
alwaysApply: false
---

### Guidelines for VUE


#### NUXT

- Use Nuxt 3 with the Composition API and <script setup> for modern applications
- Leverage auto-imports for Vue and Nuxt composables to reduce boilerplate
- Implement server routes with the server directory for API functionality
- Use Nuxt modules for extending functionality instead of custom plugins when possible
- Leverage the useAsyncData and useFetch composables for data fetching with SSR support
- Implement middleware (defineNuxtRouteMiddleware) for navigation guards
- Use Nuxt layouts for consistent page layouts across routes
- Leverage Nitro for server-side rendering and API routes
- Implement Nuxt plugins for global functionality registration
- Use state management with useState for simple state or Pinia for complex applications



#### PINIA

- Create multiple stores based on logical domains instead of a single large store
- Use the setup syntax (defineStore with setup function) for defining stores for better TypeScript inference
- Implement getters for derived state to avoid redundant computations
- Leverage the storeToRefs helper to extract reactive properties while maintaining reactivity
- Use plugins for cross-cutting concerns like persistence, state resets, or dev tools
- Implement actions for asynchronous operations and complex state mutations
- Use composable stores by importing and using stores within other stores
- Leverage the $reset() method to restore initial state when needed
- Implement $subscribe for reactive store subscriptions
- Use TypeScript with proper return type annotations for maximum type safety
